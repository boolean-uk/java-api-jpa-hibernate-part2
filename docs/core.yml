openapi: 3.0.0
info:
  title: Book API
  version: 1.0.0
  description: |-
servers:
  - url: http://localhost:4000
tags:
  - name: authors
  - name: books
  - name: publishers
paths:
  /authors:
    get:
      tags:
        - authors
      summary: Get all authors
      operationId: getAllAuthors
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      tags:
        - authors
      summary: Create an author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /authors/{id}:
    get:
      tags:
        - authors
      summary: Get an author by ID
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      tags:
        - authors
      summary: Update an author
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the author
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      tags:
        - authors
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the author
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /publishers:
    get:
      summary: Retrieve all publishers
      operationId: getAllPublishers
      tags:
        - publishers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
    post:
      summary: Create a new publisher
      operationId: createPublisher
      tags:
        - publishers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'

  /publishers/{id}:
    get:
      summary: Retrieve a publisher by ID
      operationId: getPublisherById
      tags:
        - publishers
      parameters:
        - name: id
          in: path
          description: ID of the publisher to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '404':
          description: Publisher not found

    put:
      summary: Update a publisher by ID
      operationId: updatePublisher
      tags:
        - publishers
      parameters:
        - name: id
          in: path
          description: ID of the publisher to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        '404':
          description: Publisher not found

    delete:
      summary: Delete a publisher by ID
      operationId: deletePublisher
      tags:
        - publishers
      parameters:
        - name: id
          in: path
          description: ID of the publisher to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Publisher not found
  /books:
    get:
      tags:
        - books
      summary: Retrieve all books
      operationId: getAllBooks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags:
        - books
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /books/{id}:
    get:
      tags:
        - books
      summary: Retrieve a book by ID
      operationId: getBookById
      parameters:
        - name: id
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

    put:
      tags:
        - books
      summary: Update a book by ID
      operationId: updateBook
      parameters:
        - name: id
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found

    delete:
      tags:
        - books
      summary: Delete a book by ID
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Book not found

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        genre:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        publisher:
          $ref: '#/components/schemas/Publisher'
    Author:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        alive:
          type: boolean
    Publisher:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
