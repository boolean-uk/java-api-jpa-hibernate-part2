openapi: 3.0.3
info:
  title: Java API Exercise - Core Criteria
  description: |-
  version: 0.2.2

servers:
  - url: http://localhost:4000
tags:
  - name: books
  - name: authors
  - name: publishers
paths:
  /books:
    post:
      tags:
        - books
      summary: Create a book
      description: Create a new book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBook'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    get:
      tags:
        - books
      summary: Get books
      description: Get all books
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllBooks'
  /books/{id}:
    get:
      tags:
        - books
      summary: Get book
      description: Get a book
      parameters:
        - name: id
          in: path
          description: The ID of the book to get
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      tags:
        - books
      summary: Update a book
      description: Update a book by ID
      parameters:
        - name: id
          in: path
          description: The ID of the book to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBook'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
        - books
      summary: Delete a book
      description: Delete a book by ID
      parameters:
        - name: id
          in: path
          description: The ID of the book to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /authors:
    post:
      tags:
        - authors
      summary: Create an author
      description: Create a new author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthor'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    get:
      tags:
        - authors
      summary: Get authors
      description: Get all authors
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllAuthors'
  /authors/{id}:
    get:
      tags:
        - authors
      summary: Get author
      description: Get an author
      parameters:
        - name: id
          in: path
          description: The ID of the author to get
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    put:
      tags:
        - authors
      summary: Update an author
      description: Update an author by ID
      parameters:
        - name: id
          in: path
          description: The ID of the author to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthor'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      tags:
        - authors
      summary: Delete an author
      description: Delete an author by ID
      parameters:
        - name: id
          in: path
          description: The ID of the author to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /publishers:
    post:
      tags:
        - publishers
      summary: Create a publisher
      description: Create a new publisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePublisher'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
    get:
      tags:
        - publishers
      summary: Get publishers
      description: Get all publishers
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPublishers'
  /publishers/{id}:
    get:
      tags:
        - publishers
      summary: Get publisher
      description: Get a publisher
      parameters:
        - name: id
          in: path
          description: The ID of the publisher to get
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
    put:
      tags:
        - publishers
      summary: Update a publisher
      description: Update a publisher by ID
      parameters:
        - name: id
          in: path
          description: The ID of the publisher to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePublisher'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
    delete:
      tags:
        - publishers
      summary: Delete a publisher
      description: Delete a publisher by ID
      parameters:
        - name: id
          in: path
          description: The ID of the publisher to delete
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'

components:
  schemas:
    CreateBook:
      type: object
      required: [title, genre, author_id, publisher_id]
      properties:
        title:
          type: string
          example: "The Lord of the Rings"
        genre:
          type: string
          example: "Fantasy"
        author_id:
          type: integer
          example: 1
        publisher_id:
          type: integer
          example: 1
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "The Lord of the Rings"
        genre:
          type: string
          example: "Fantasy"
        author_id:
          type: integer
          example: 1
        publisher_id:
          type: integer
          example: 1
    AllBooks:
      type: array
      items:
        $ref: '#/components/schemas/Book'

    CreateAuthor:
      type: object
      required: [first_name, last_name, email, alive]
      properties:
        first_name:
          type: string
          example: "John R.R."
        last_name:
          type: string
          example: "Tolkien"
        email:
          type: email
          format: email
          example: "john@tolkien.com"
        alive:
          type: boolean
          example: true
    Author:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John R.R."
        last_name:
          type: string
          example: "Tolkien"
        email:
          type: email
          format: email
          example: "john@tolkien.com"
        alive:
          type: boolean
          example: true
    AllAuthors:
      type: array
      items:
        $ref: '#/components/schemas/Author'

    CreatePublisher:
      type: object
      required: [name, location]
      properties:
        name:
          type: string
          example: "Allen and Unwin"
        location:
          type: string
          example: "Crows Nest, Australia"
    Publisher:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Allen and Unwin"
        location:
          type: string
          example: "Crows Nest, Australia"
    AllPublishers:
      type: array
      items:
        $ref: '#/components/schemas/Publisher'
